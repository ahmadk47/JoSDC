	.data
aux: 	.word 0:1500 
nums:	.word 599,496,541,-320,-573,-708,824,396,-204,-1000,545,10,-382,-822,389,318,114,825,679,-77,523,-547,-583,29,546,-78,-717,-173,-961,-878,174,-593,-459,680,929,750,188,-188,-8,-810,-60,981,-117,383,-844,607,764,298,-241,828,411,-872,143,715,115,651,-312,954,563,1292,164,-731,54,548,907,900,-165,311,822,-747,-997,281,975,997,-309,261,632,-864,488,-562,702,-239,-854,-971,341,210,687,170,-53,244,-326,-497,-852,403,-61,-1370,-769,234,466,936,-851,-70,659,306,602,-758,-29,279,355,911,1148,803,-472,644,-635,-406,-799,-365,-414,108,-333,-941,892,-489,-183,113,1435,-533,-901,-258,-286,801,5,-93,719,28,-811,-680,710,-156,46,682,-353,-427,-569,996,557,-250,485,-999,-821,944,516,-621,660,814,-880,963,560,626,325,701,154,103,580,-65,883,-700,689,145,720,782,-586,-829,937,901,-914,960,-571,-871,99,102,334,97,-121,184,-234,-345,-415,454,85,-124,-18,119,-47,180,-86,1000,-494,487,-159,-363,33,-633,965,-791,359,493,-22,-577,191,-52,-465,-275,167,770,941,-253,-211,-421,247,978,994,-352,693,-531,658,-505,-282,-661,1333,-790,-412,970,888,62,-299,136,-180,-148,949,-350,-199,853,974,-177,0,-228,-775,-520,579,914,-495,87,1032,-476,-970,923,-479,-654,580,190,-325,326,147,20,332,304,840,-660,379,239,427,760,450,-686,-1086,-434,-490,-721,-378,351,477,-488,-351,440,-910,797,-607,-566,745,-327,809,881,692,-191,741,622,365,471,586,-114,-269,-558,495,152,321,-518,-904,-295,-735,-917,432,421,886,443,64,578,294,703,-514,474,852,201,606,91,-668,-1649,1547,272,898,748,870,616,850,50,916,539,138,123,94,-1120,-484,131,453,-748,-425,-367,-858,-640,-145,863,-831,-1,387,877,-501,-107,-542,211,511,-14,942,768,882,766,36,-384,-713,-482,89,368,-338,620,525,457,-738,-932,-849,-672,-418,-693,-331,619,-885,71,55,376,-969,-366,-314,-826,-411,-1452,35,-235,-120,-54,885,-171,-190,547,225,-428,-850,987,-647,781,454,-469,-35,-682,-453,984,638,-446,-536,124,-624,436,-550,423,-277,-142,681,-230,442,347,905,-341,-525,-976,790,250,968,-373,596,276,116,800,956,-112,690,121,733,-843,569,-618,817,-572,296,-779,-403,-68,899,310,-697,129,-262,-718,652,-540,645,435,-587,654,-903,475,893,25,309,-63,-553,498,-555,395,-4,804,230,749,-376,-441,973,-215,-76,66,958,197,-118,-440,-467,-28,39,-803,-659,-611,142,-186,633,430,890,229,-939,762,-740,-688,-602,605,-889,551,128,-251,-609,1157,-110,106,769,843,-32,-254,268,-528,135,-771,-845,728,-539,385,-866,455,238,847,614,585,815,-655,1143,-179,-474,920,537,876,731,476,-1641,-511,-532,-687,-387,-58,-729,-644,-158,-381,743,-354,387,-217,-25,-1154,22,555,915,-176,-923,-260,-642,-927,765,621,-552,480,-302,755,204,-274,773,-925,330,676,-792,-616,157,16,646,248,-244,-991,254,-537,-34,967,38,-210,401,-192,-416,299,665,17,-455,-557,9,553,795,-443,-291,177,534,-298,-62,-867,-242,-997,-75,-55,-470,-828,-31,185,524,508,-246,151,793,571,566,-23,166,246,339,-116,-762,565,982,-3,837,30,-224,-349,-397,1025,-87,-340,669,-40,-685,328,792,-118,194,-893,703,-958,957,-197,-480,928,-369,600,460,-458,998,13,-504,-947,-304,-162,-549,739,-634,935,579,120,293,63,-556,171,-736,-770,-766,350,-15,988,-43,1001,-848,-356,337,-73,-294,559,561,14,193,666,-836,-691,-900,-754,-584,906,-817,-284,-196,695,718,-181,-551,-953,327,-912,-185,-1570,-296,162,775,58,-787,-805,-26,226,-335,-798,786,961,544,409,147,32,-164,667,52,-447,-268,-448,-293,-730,-599,-198,452,-562,-140,-823,-449,15,721,-835,-270,-238,-862,122,-699,320,224,-723,-139,-988,-805,255,-570,940,-773,617,-499,-949,45,-374,-418,-580,896,-568,-746,-519,-405,-336,3,-138,467,412,-929,348,117,146,-859,583,528,422,656,-696,934,-806,361,-281,470,-726,21,86,-460,-869,-517,-71,433,112,-704,-954,416,313,8,329,-606,-1024,-695,-386,832,609,405,183,342,-466,794,59,643,363,160,-674,-856,-546,-98,-101,670,-861,207,-887,-182,-135,324,273,860,295,872,398,789,492,312,-285,-510,1162,640,438,819,449,267,109,-597,-943,-50,-865,-195,263,198,-108,-818,-840,-524,567,245,-290,-653,698,990,-315,388,195,-788,930,-5,-561,697,-1356,297,-839,-513,37,-650,595,777,639,-712,126,593,-256,53,-169,725,754,-649,-563,-591,159,-141,535,-1292,744,-486,410,727,-707,-83,-357,-205,-94,-841,597,894,-545,796,-842,910,873,-375,966,264,-66,-989,-623,478,148,-907,953,1738,482,993,708,-933,-461,253,233,51,-152,384,582,-88,507,-921,-430,753,-797,634,-926,425,590,-1557,386,799,-203,-724,-939,-622,462,-857,-873,127,939,399,-760,917,950,1229,-764,26,165,844,613,-255,-543,139,-157,364,303,-575,-541,575,-6,615,280,918,-10,-385,-870,699,-300,-208,428,757,277,-753,-892,756,-530,-68,-727,-439,943,700,181,486,-67,-146,576,818,784,-637,-225,-389,444,-11,392,774,149,-69,-860,550,-590,897,938,736,919,802,-888,236,242,713,780,-323,-172,-328,875,219,-42,163,472,587,-209,305,-111,-24,447,-175,343,-855,463,-937,-808,880,307,-749,-16,711,-625,168,206,884,808,-123,-289,688,-232,-106,271,-656,589,912,924,530,-737,1298,664,812,215,336,-853,-809,-875,-820,-317,631,611,767,-962,-603,192,11,-702,222,-679,155,624,913,-882,-516,200,653,-662,-1392,491,-786,198,972,588,1380,529,-184,947,737,7,-201,-57,-82,674,216,-942,-110,19,-711,891,156,-906,-475,-938,758,-815,-226,726,258,-17,807,-883,-876,592,-221,-812,-1553,-636,-608,668,-464,74,864,-579,98,-437,-802,-12,-1396,-629,291,-223,-214,266,515,196,61,-648,-168,-768,490,-755,556,213,-772,302,1,-725,-7,834,933,-527,-992,601,481,300,-322,18,868,27,-692,439,-890,-372,391,-963,-477,406,-948,985,-604,282,-216,977,441,408,-334,540,714,34,-733,-56,40,176,785,-402,464,-631,848,612,-765,746,827,771,523,696,1571,-252,-834,677,-368,874,-155,-272,-333,72,497,-227,-667,-202,554,-783,390,846,-21,-538,-626,-419,838,286,672,735,830,274,-814,79,776,-784,-84,214,459,-728,479,357,-846,-564,360,-59,-134,-122,-652,-847,-744,-297,608,598,-316,-1503,92,-129,172,-804,73,80,-413,-825,-763,-503,208,-945,-463,189,-706,-78,-701,-2,-1308,473,568,70,924,-153,-588,549,-189,366,-868,489,446,-72,950,-975,932,-886,-39,674,-410,955,859,101,695,-534,-994,858,-678,869,431,-390,-115,-125,-89,-670,448,716,-951,-638,991,-462,60,-600,249,-360,-928,747,-601,193,671,-102,-339,734,-710,879,76,-816,-127,95,-81,47,-833,691,519,-916,683,-422,-522,-399,-33,-596,577,-986,367,-348,778,400,382,902,-526,-329,-719,458,866,-705,729,-229,358,-280,-273,594,-940,-891,-401,284,685,-895,538,806,275,-694,356,-150,673,-313,227,-213,331,-44,1033,290,-896,-819,603,-523,740,-675,-131,610,723,-311,-671,259,-837,623,857,-756,-795,-160,125,90,-377,878,-144,-980,-987,973,-935,-492,-396,951,-117,-288,-592,542,618,-950,-100,179,-993,-233,-238,-103,-263,-429,962,-222,514,-676,995,-20,333,705,266,-627,564,-151,591,510,158,-1082,724,851,-967,999,-30,-785,-152,-521,393,526,296,-481,931,-330,-800,-1393,931,842,-651,-337,417,738,265,-240,959,370,707,-271,-952,-398,83,-308,377,-392,-310,-828
	.text

Main:	
	addi $4,$0, 1500    # Address of array num
	#addi $4,$0, 6000
	addi $5, $0, 0 	    # $a1 = low	
	addi $6, $0, 1499   # $a2 = high
	jal Mergesort       # Go to MergeSort 
   	addi $8, $0, 1500   # Address of array num
   	#addi $8, $0, 6000
    	addi $9,$0, 1500    # Load length of array into $t1
    	addi $10,$0,0       # Initialize triplet_count to 0
    	addi $11,$0,0       # Initialize i = 0
outer_loop:
        bge $11, $9, end_outer 
    	sub $12, $9, 2      # n - 2
    	bge $11, $12, end_outer # i >= n-2
    	# Skip duplicates for i
   	beq $11,$0, skip_duplicate_i # i == 0
    	sll $13, $11, 0    
    	#sll $13, $11, 2    
    	add $14, $8, $13        
    	lw $15, 0($14)          # numbers[i]
    	lw $24, -1($14)         # numbers[i-1]
    	#lw $24, -4($14)
   	beq $15, $24, next_i    # numbers[i] == numbers[i-1]

skip_duplicate_i:
    	addi $25, $11, 1        # left = i + 1
    	sub $16, $9, 1          # right = n - 1

inner_loop:
    	bge $t9, $16, next_i    # left >= right

        # total = numbers[i] + numbers[left] + numbers[right]
    	sll $17, $11, 0         # $s1 = i * 4 (offset for numbers[i])
    	#sll $17, $11, 2
    	add $18, $8, $17        # $s2 = address of numbers[i]
    	lw $19, 0($18)           # $s3 = numbers[i]

    	sll $20, $25, 0          # $s4 = left * 4 (offset for numbers[left])
    	#sll $20, $25, 2
    	add $21, $8, $20        # $s5 = address of numbers[left]
    	lw $22, 0($s5)           # $s6 = numbers[left]

   	sll $23, $16, 0          # $s7 = right * 4 (offset for numbers[right])
   	#sll $23, $16, 2
    	add $13, $8, $23        # $t5 = address of numbers[right]
    	lw $14, 0($13)           # $t6 = numbers[right]

    	add $15, $19, $22        # $t7 = numbers[i] + numbers[left]
   	add $15, $15, $14        # $t7 = total = numbers[i] + numbers[left] + numbers[right]

        # Check if total == 0
   	bne $15,$0, not_zero     # If total != 0

        # If total == 0
   	addi $10, $10, 1         # triplet_count++

        # Skip duplicates for left and right
        addi $25, $25, 1         # left++
    	addi $16, $16, -1        # right--

skip_left_duplicates:
   	bge $25, $16, next_i     # If left >= right, exit inner loop
   	sll $17, $25,0 
   	#sll $17, $25, 2        
    	add $18, $8, $17         # address of numbers[left]
    	lw $19, 0($18)           # numbers[left]
    	lw $20, -1($18)          # numbers[left-1]
    	#lw $20, -4($18)
    	bne $19, $20, skip_right_duplicates # numbers[left] != numbers[left-1]
    	addi $25, $25, 1         # left++
   	j skip_left_duplicates

skip_right_duplicates:
    	sll $17, $16, 0    
    	#sll $17, $16, 2      
    	add $18, $8, $17        
    	lw $19, 0($18)           # numbers[right]
    	lw $20, 1($18)           # numbers[right+1]
    	#lw $20, 4($18)
    	bne $19, $20, inner_loop # numbers[right] != numbers[right+1]
    	addi $16, $16, -1        # right--
    	j skip_right_duplicates

not_zero:
    	blt $15, $0, move_left    # If total < 0, move left
    	addi $16, $16, -1        # If total > 0, move right
    	j inner_loop

move_left:
    	addi $25, $25, 1         # left++
    	j inner_loop

next_i:
    	addi $11, $11, 1         # i++
    	j outer_loop

end_outer:
   	j Exit


	
Mergesort: 
	bge $5, $6 , Return	
	
	addi, $29, $29, -4
	#addi, $29, $29, -16  	
	sw, $31, 3($29)	# return address
	#sw, $31, 12($29)
	sw, $5, 2($29)	       	# low
	#sw, $5, 8($29)
	sw, $6, 1($29)        	# high
	#sw, $6, 4($29)
	
	add $s0, $5, $6	# mid = low + high
	srl $s0, $16, 1		# mid = (low + high) / 2
	sw $s0, 0($29) 		
				
	add $6, $16, $0 	
	jal Mergesort		
	
	lw $s0, 0($29)		# mid
	addi $17, $16, 1	# mid + 1
	add $5, $17, $0 	# low = mid + 1 
	lw $6, 1($29) 		# high
	#lw $6, 4($29)
	jal Mergesort 		
	
	lw, $5, 2($sp) 	# low
	#lw, $5, 8($sp)
	lw, $6, 1($sp)  	# high
	#lw, $6, 4($sp)
	lw, $7, 0($sp) 	# mid
	jal Merge			
				
	lw $31, 3($29)	
	#lw $31, 12($29)	
	addi $29, $29, 4 
	#addi $29, $29, 16	
	jr  $31

Return:
	jr $31 			
	
Merge:
	add  $16, $5, $0 	# i = low
	add  $17, $5, $0 	# k = low
	addi $18, $7, 1  	# j = mid + 1

While1: 
	blt  $7,  $16, While2	# mid < i
	blt  $6,  $18, While2	# high < j
	j  If			# if i <= mid && j <=high
	
If:
	sll  $8, $16, 0
	#sll  $8, $16, 2	
	add  $8, $8, $4	
	lw   $9, 0($8)	# a[i]
	sll  $10, $18, 0
	#sll  $10, $18, 2	
	add  $10, $10, $4	
	lw   $11, 0($10)	# a[j]	
	blt  $11, $9, Else	# if a[j] < a[i]
	addi $12,$0, 0
	sll  $13, $17, 0
	#sll  $13, $17, 2	
	add  $12, $12, $13	
	sw   $9, 0($12)	# c[k] = a[i]
	addi $17, $17, 1	# k++
	addi $16, $16, 1	# i++
	j    While1		
	
Else:
	sll  $10, $18, 0
	#sll  $10, $18, 2	
	add  $10, $10, $4	
	lw   $11, 0($10)	# a[j]	
	addi $12,$0, 0	
	sll  $13, $17, 0
	#sll  $13, $17, 2	
	add  $12, $12, $13	
	sw   $11, 0($12)	# c[k] = a[j]
	addi $17, $17, 1	# k++
	addi $18, $18, 1	# j++
	j    While1		
	
While2:
	blt  $7, $16, While3 	# mid < i
	sll $8, $16, 0
	#sll $8, $16, 2		
	add $8, $4, $8	
	lw $9, 0($8)		# a[i]
	addi $10,$0, 0		
	sll $11, $17, 0 
	#sll $11, $17, 2       
	add $11, $11, $10	
	sw $9, 0($11) 		
	addi $17, $17, 1   	# k++
	addi $16, $16, 1   	# i++
	j While2		
	

While3:
	blt $6, $17, For_Initializer	# high < j
	sll $10, $18, 0
	#sll $10, $18, 2    	
	add $10, $10, $4  	
	lw $11, 0($10)     	# a[j]
	
	addi  $12,$0, 0		
	sll $13, $17, 0 
	#sll $13, $17, 2	 	
	add $12, $12, $13  	
	sw $11, 0($12)     	
	addi $17, $17, 1   	# k++
	addi $18, $18, 1   	# j++
	j While3		

For_Initializer:
	add  $8, $5, $0	
	addi $9, $6, 1 	
	addi $12,$0, 0		
	j    For
For:
	bge $8, $9 , sortEnd	
	sll $10, $8, 0 
	#sll $10, $8, 2  	
	add $11, $10, $4	
	add $13, $10, $12
	lw $14, 0($13)		
	sw $14, 0($11)   	
	addi $8, $8, 1 	
	j For 			

sortEnd:
	jr $31				
	
Exit:

