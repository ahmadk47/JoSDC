module controlUnit_tb;

    // Inputs
    reg [5:0] opCode1, funct1, opCode2, funct2;

    // Outputs
    wire Branch1, MemReadEn1, MemWriteEn1, RegWriteEn1, ALUSrc1, Jump1, PcSrc1;
    wire Branch2, MemReadEn2, MemWriteEn2, RegWriteEn2, ALUSrc2, Jump2, PcSrc2;
    wire [1:0] MemtoReg1, RegDst1, MemtoReg2, RegDst2;
    wire [3:0] ALUOp1, ALUOp2;

    // Instantiate the control unit
    controlUnit uut (
        .opCode1(opCode1), .funct1(funct1),
        .opCode2(opCode2), .funct2(funct2),
        .Branch1(Branch1), .MemReadEn1(MemReadEn1), .MemWriteEn1(MemWriteEn1), .RegWriteEn1(RegWriteEn1),
        .ALUSrc1(ALUSrc1), .Jump1(Jump1), .PcSrc1(PcSrc1),
        .Branch2(Branch2), .MemReadEn2(MemReadEn2), .MemWriteEn2(MemWriteEn2), .RegWriteEn2(RegWriteEn2),
        .ALUSrc2(ALUSrc2), .Jump2(Jump2), .PcSrc2(PcSrc2),
        .MemtoReg1(MemtoReg1), .RegDst1(RegDst1),
        .MemtoReg2(MemtoReg2), .RegDst2(RegDst2),
        .ALUOp1(ALUOp1), .ALUOp2(ALUOp2)
    );

    // Test procedure
    initial begin
        // Monitor signals
        $monitor("Time = %0t: opCode1 = %h, funct1 = %h, opCode2 = %h, funct2 = %h\n"
                 "Branch1 = %b, MemReadEn1 = %b, MemWriteEn1 = %b, RegWriteEn1 = %b, ALUSrc1 = %b, Jump1 = %b, PcSrc1 = %b\n"
                 "Branch2 = %b, MemReadEn2 = %b, MemWriteEn2 = %b, RegWriteEn2 = %b, ALUSrc2 = %b, Jump2 = %b, PcSrc2 = %b\n"
                 "MemtoReg1 = %b, RegDst1 = %b, MemtoReg2 = %b, RegDst2 = %b\n"
                 "ALUOp1 = %b, ALUOp2 = %b\n",
                 $time, opCode1, funct1, opCode2, funct2,
                 Branch1, MemReadEn1, MemWriteEn1, RegWriteEn1, ALUSrc1, Jump1, PcSrc1,
                 Branch2, MemReadEn2, MemWriteEn2, RegWriteEn2, ALUSrc2, Jump2, PcSrc2,
                 MemtoReg1, RegDst1, MemtoReg2, RegDst2,
                 ALUOp1, ALUOp2);

        // Test case 1: R-type (add) and I-type (addi)
        opCode1 = 6'h0; funct1 = 6'h20; // add
        opCode2 = 6'h8; funct2 = 6'h0;  // addi
        #10;

        // Test case 2: Load (lw) and Store (sw)
        opCode1 = 6'h23; funct1 = 6'h0; // lw
        opCode2 = 6'h2b; funct2 = 6'h0; // sw
        #10;

        // Test case 3: Branch (beq) and Jump (j)
        opCode1 = 6'h4; funct1 = 6'h0;  // beq
        opCode2 = 6'h2; funct2 = 6'h0;  // j
        #10;

        // Test case 4: R-type (sub) and I-type (ori)
        opCode1 = 6'h0; funct1 = 6'h22; // sub
        opCode2 = 6'h0d; funct2 = 6'h0; // ori
        #10;

        // Test case 5: Jump and Link (jal) and R-type (and)
        opCode1 = 6'h3; funct1 = 6'h0;  // jal
        opCode2 = 6'h0; funct2 = 6'h24; // and
        #10;

        // End simulation
        $finish;
    end

endmodule